package main

func myPow(x float64, n int) float64 {
	if n == 0 {
		return 1
	}

	// Если степень отрицательная, преобразуем её в положительную,
	// и возвращаем обратное значение, используя свойство: x^(-n) = 1 / x^n
	if n < 0 {
		return 1 / myPow(x, -n)
	}

	/*
		Идея бинарного возведения в степень.
		Для четных чисел n:
				Любое четное число n можно записать как n == 2k => a^n == a^(2k) == (a^k)^2.
				таким образом, степень n сводится к числу k и возведению результата в квадрат.
				Пример для наглядности: 2^4 == (2^2)^2 == 4^2 == 16.
		Для нечетных чисел n:
				Любое нечетное число n можно записать как n == 2k + 1 => a * a^(2k).
				таким образом, степень n сводится к числу k и умножению результата на a.
				Пример для наглядности: 2^5 == (2^4) * 2 == 32.
	*/
	result := 1.0
	for n > 0 {
		if n%2 == 1 {
			result *= x
		}
		x *= x
		n /= 2
	}

	return result
}
