package main

import (
	"strconv"
)

/*  Учитывая, что два неотрицательных целых числа num1 и num2 представлены в виде строк,
    возвращает произведение num1 и num2, также представленное в виде строки.
*/

func multiply(num1 string, num2 string) string {
	if num1 == "0" || num2 == "0" {
		return "0"
	}

	// Создаем срезы для чисел, инвертированных в порядке, чтобы умножать их с конца
	A := make([]int, len(num1))
	B := make([]int, len(num2))

	// Преобразуем строку num1 в срез A, инвертируя порядок чисел
	for i := 0; i < len(num1); i++ {
		A[i], _ = strconv.Atoi(string(num1[len(num1)-1-i])) // Преобразуем символ в число
	}

	// Преобразуем строку num2 в срез B, инвертируя порядок чисел
	for i := 0; i < len(num2); i++ {
		B[i], _ = strconv.Atoi(string(num2[len(num2)-1-i])) // Преобразуем символ в число
	}

	// Результат умножения будет иметь длину, равную сумме длин двух чисел
	res := make([]int, len(A)+len(B))

	// Выполняем поразрядное умножение чисел
	for i := 0; i < len(A); i++ {
		for j := 0; j < len(B); j++ {
			res[i+j] += A[i] * B[j] // Умножаем цифры и добавляем в соответствующую позицию
			if res[i+j] >= 10 {
				// Если число больше 10, переносим десятки в следующую позицию
				res[i+j+1] += res[i+j] / 10
				res[i+j] %= 10 // Оставляем только остаток от деления
			}
		}
	}

	// Преобразуем результат из среза в строку
	result := ""
	for i := len(res) - 1; i >= 0; i-- {
		// Пропускаем ведущие нули
		if !(result == "" && res[i] == 0) {
			result += strconv.Itoa(res[i]) // Добавляем цифры в результат
		}
	}

	return result
}

/*
func main() {
	fmt.Println(multiply("123", "456")) // Выведет: "56088"
}
*/
